<?xml version="1.0" encoding="UTF-8"?><rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Offline Project &#8211; OfflineObserver</title>
	<atom:link href="https://offline.local/category/offline-project/feed/" rel="self" type="application/rss+xml" />
	<link>https://offline.local</link>
	<description></description>
	<lastBuildDate>Fri, 30 Aug 2024 16:49:49 +0000</lastBuildDate>
	<language>en-US</language>
	<sy:updatePeriod>
	hourly	</sy:updatePeriod>
	<sy:updateFrequency>
	1	</sy:updateFrequency>
	<generator>https://wordpress.org/?v=6.6.1</generator>

<image>
	<url>https://offline.local/wp-content/uploads/2024/08/logo-150x150.png</url>
	<title>Offline Project &#8211; OfflineObserver</title>
	<link>https://offline.local</link>
	<width>32</width>
	<height>32</height>
</image> 
	<item>
		<title>gomoku</title>
		<link>https://offline.local/gomoku/</link>
					<comments>https://offline.local/gomoku/#respond</comments>
		
		<dc:creator><![CDATA[offline]]></dc:creator>
		<pubDate>Fri, 30 Aug 2024 16:10:47 +0000</pubDate>
				<category><![CDATA[Offline Project]]></category>
		<guid isPermaLink="false">https://offline.local/?p=82</guid>

					<description><![CDATA[Gomoku Game Who&#8217;s first? Computer (Expert) Me (trainee) RESTART Our first project is Gomoku. Just complete 5 stones first, regardless of horizontal, vertical, or diagonal.]]></description>
										<content:encoded><![CDATA[
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gomoku Game</title>
    <style>
html, body {
    margin: 0;
    padding: 0;
    height: 100%;
    width: 100%;
    background-color: transparent;
}

.game-wrapper {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100%;
    width: 100%;
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    background-color: transparent;
}

.game-container {
    position: relative;
    width: 100%;
    height: 100%;
    max-width: 83vmin;
    max-height: 83vmin;
    aspect-ratio: 1 / 1;
    background-color: transparent;
}

#board {
    display: grid;
    grid-template-columns: repeat(15, 1fr);
    grid-template-rows: repeat(15, 1fr);
    gap: 0;
    width: 100%;
    height: 100%;
    background-color: #dcb35c;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative;
    border: 2px solid #000;
    aspect-ratio: 1 / 1;
}

@media (max-width: 680px) {
    .game-container {
        max-width: 100vw;
        max-height: 100vw;
    }
}

.cell {
    position: relative;
    cursor: pointer;
}

.cell::before,
.cell::after {
    content: '';
    position: absolute;
    background-color: black;
    z-index: 1;
}

.cell::before {
    left: 50%;
    top: 0;
    bottom: 0;
    width: 1px;
}

.cell::after {
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
}

.stone {
    position: absolute;
    width: 90%;
    height: 90%;
    border-radius: 50%;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 3;
    outline: none;
    -webkit-tap-highlight-color: transparent;
}

.stone.black {
    background-color: #000!important;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.5) !important;
}

.stone.white {
    background-color: #fff!important;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3) !important;
}

.cell.last-move .stone {
    box-shadow: 0 0 10px 2px #ffff00 !important;
}

.cell.winning-move .stone {
    box-shadow: 0 0 10px 3px #ffff00 !important;
}

* {
    -webkit-tap-highlight-color: transparent;
}

#message {
    position: absolute;
    top: 10px;
    left: 0;
    right: 0;
    text-align: center;
    z-index: 5;
    font-size: 22px;
    color: #fff;
}

#start, #restart, #computerFirst, #meFirst {
    position: absolute;
    padding: 10px 20px;
    font-size: 18px;
    cursor: pointer;
    background-color: rgba(76, 175, 80, 0.6);
    color: white;
    border: none;
    border-radius: 5px;
    transition: background-color 0.3s;
    z-index: 10;
}

#start:hover, #restart:hover, #computerFirst:hover, #meFirst:hover {
    background-color: rgba(69, 160, 73, 0.6);
}

#start, #restart {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

#computerFirst, #meFirst {
    width: 200px;
}

#computerFirst {
    top: calc(50% - 30px);
    left: 50%;
    transform: translate(-50%, -50%);
}

#meFirst {
    top: calc(50% + 30px);
    left: 50%;
    transform: translate(-50%, -50%);
}

#restart {
    display: none;
}

.dot {
    position: absolute;
    width: 15%;
    height: 15%;
    background-color: #000;
    border-radius: 50%;
    top: 51%;
    left: 51%;
    transform: translate(-50%, -50%);
    z-index: 2;
}

#whoFirst {
    position: absolute;
    top: calc(50% - 70px);
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 24px;
    color: white;
    text-align: center;
    z-index: 10;
}

#startScreen {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    z-index: 20;
}
    </style>
</head>
<body style="background-color: transparent;">
    <div class="game-wrapper">
        <div class="game-container">
            <div id="board"></div>
            <div id="startScreen">
                <div id="whoFirst">Who&#8217;s first?</div>
                <button id="computerFirst">Computer (Expert)</button>
                <button id="meFirst">Me (trainee)</button>
            </div>
            <button id="restart">RESTART</button>
            <div id="message"></div>
        </div>
    </div>
    <script>
// 전역 변수
const boardSize = 15;
const dotPositions = [];
let board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(null));
let gameOver = false;
let currentPlayer = 'P';
let lastMove = null;

const boardElement = document.getElementById('board');
const messageElement = document.getElementById('message');
const restartButton = document.getElementById('restart');
const startScreen = document.getElementById('startScreen');
const computerFirstButton = document.getElementById('computerFirst');
const meFirstButton = document.getElementById('meFirst');

// 보드 생성 및 초기화
function createBoard() {
    boardElement.innerHTML = '';
    for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
            const cell = document.createElement('div');
            cell.className = 'cell';
            cell.dataset.row = row;
            cell.dataset.col = col;
            cell.addEventListener('click', onCellClick);
            boardElement.appendChild(cell);
        }
    }
    addDotsToBoard();
}

function addDotsToBoard() {
    dotPositions.forEach(position => {
        const cell = boardElement.children[position - 1];
        if (cell) {
            const dot = document.createElement('div');
            dot.className = 'dot';
            cell.appendChild(dot);
        }
    });
}

// 게임 로직
function onCellClick(event) {
    const row = parseInt(event.target.dataset.row);
    const col = parseInt(event.target.dataset.col);

    if (!board[row][col] && !gameOver && currentPlayer === 'P') {
        makeMove(row, col);
    }
}

function makeMove(row, col) {
    board[row][col] = currentPlayer;
    const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
    const stone = document.createElement('div');
    stone.className = `stone ${currentPlayer === 'P' ? 'black' : 'white'}`;
    stone.style.setProperty('background-color', currentPlayer === 'P' ? '#000' : '#fff', 'important');
    cell.appendChild(stone);

    if (lastMove && !gameOver) {
        const lastCell = document.querySelector(`[data-row="${lastMove.row}"][data-col="${lastMove.col}"]`);
        lastCell.classList.remove('last-move');
    }

    cell.classList.add('last-move');
    lastMove = { row, col };

    const winningCells = checkWinner(row, col, currentPlayer);
    if (winningCells) {
        highlightWinningCells(winningCells);
        endGame(`${currentPlayer === 'P' ? 'User' : 'Computer'} wins!`);
        return;
    }

    currentPlayer = currentPlayer === 'P' ? 'C' : 'P';

    if (currentPlayer === 'C') {
        setTimeout(computerMove, 500);
    }
}

// AI 로직
function computerMove() {
    if (gameOver) return;

    let bestMove = null;

    // 중앙에서 시작하는 첫 번째 움직임 로직
    if (lastMove === null) {
        const center = Math.floor(boardSize / 2);
        bestMove = { row: center, col: center };
    } else {
        bestMove = getBestMove();
    }

    if (bestMove) {
        makeMove(bestMove.row, bestMove.col);
    }
}

function evaluateMove(row, col, player) {
    let score = 0;
    const directions = [
        { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }, { x: 1, y: -1 }
    ];

    for (const { x, y } of directions) {
        let count = 1;
        let open = 0;
        let blocked = 0;

        for (let i = 1; i < 6; i++) {
            const newRow = row + i * y;
            const newCol = col + i * x;
            if (newRow < 0 || newRow >= boardSize || newCol < 0 || newCol >= boardSize) {
                blocked++;
                break;
            }
            if (board[newRow][newCol] === player) count++;
            else if (board[newRow][newCol] === null) {
                open++;
                break;
            } else {
                blocked++;
                break;
            }
        }

        for (let i = 1; i < 6; i++) {
            const newRow = row - i * y;
            const newCol = col - i * x;
            if (newRow < 0 || newRow >= boardSize || newCol < 0 || newCol >= boardSize) {
                blocked++;
                break;
            }
            if (board[newRow][newCol] === player) count++;
            else if (board[newRow][newCol] === null) {
                open++;
                break;
            } else {
                blocked++;
                break;
            }
        }

        if (count >= 5) score += 1000000;
        else if (count === 4 && open === 2) score += 500000;
        else if (count === 4 && open === 1) score += 100000;
        else if (count === 3 && open === 2) score += 50000;
        else if (count === 3 && open === 1) score += 10000;
        else if (count === 2 && open === 2) score += 5000;
        else if (count === 2 && open === 1) score += 1000;
        else if (count === 1 && open === 2) score += 500;

        // Defensive scoring
        if (player === 'P') {
            if (count === 4 && open === 1) score += 90000;
            else if (count === 3 && open === 2) score += 40000;
        }
    }

    return score;
}

function getBestMove() {
    let bestMove = null;
    let maxScore = -Infinity;

    for (let row = 0; row < boardSize; row++) {
        for (let col = 0; col < boardSize; col++) {
            if (!board[row][col]) {
                let attackScore = evaluateMove(row, col, 'C');
                let defenseScore = evaluateMove(row, col, 'P');

                let score = attackScore + defenseScore * 0.9;

                if (score > maxScore) {
                    maxScore = score;
                    bestMove = { row, col };
                }
            }
        }
    }

    return bestMove;
}

// 승리 확인
function checkWinner(row, col, player) {
    const directions = [
        { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }, { x: 1, y: -1 }
    ];

    for (const { x, y } of directions) {
        let count = 1;
        let cells = [{ row, col }];

        for (let i = 1; i < 5; i++) {
            const newRow = row + i * y;
            const newCol = col + i * x;
            if (newRow < 0 || newRow >= boardSize || newCol < 0 || newCol >= boardSize || board[newRow][newCol] !== player) {
                break;
            }
            count++;
            cells.push({ row: newRow, col: newCol });
        }

        for (let i = 1; i < 5; i++) {
            const newRow = row - i * y;
            const newCol = col - i * x;
            if (newRow < 0 || newRow >= boardSize || newCol < 0 || newCol >= boardSize || board[newRow][newCol] !== player) {
                break;
            }
            count++;
            cells.push({ row: newRow, col: newCol });
        }

        if (count >= 5) {
            return cells;
        }
    }
    return null;
}

// UI 업데이트
function highlightWinningCells(cells) {
    cells.forEach(({ row, col }) => {
        const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
        cell.classList.add('winning-move');
    });
}

function endGame(message) {
    gameOver = true;
    messageElement.textContent = message;
    restartButton.style.display = 'block';
}

// 게임 재시작
function restartGame() {
    board = Array(boardSize).fill(null).map(() => Array(boardSize).fill(null));
    gameOver = false;
    lastMove = null;
    messageElement.textContent = '';
    restartButton.style.display = 'none';
    startScreen.style.display = 'flex';
    boardElement.style.display = 'none';
    createBoard();
}

function updateStoneColors() {
    document.querySelectorAll('.stone').forEach(stone => {
        if (stone.classList.contains('black')) {
            stone.style.setProperty('background-color', '#000', 'important');
        } else if (stone.classList.contains('white')) {
            stone.style.setProperty('background-color', '#fff', 'important');
        }
    });
}

function detectColorSchemeChange() {
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
                updateStoneColors();
            }
        });
    });

    observer.observe(document.body, {
        attributes: true,
        attributeFilter: ['class']
    });
}

function startColorUpdateInterval() {
    setInterval(updateStoneColors, 100); // 100ms마다 색상 업데이트
}

// 게임 시작
function startGame(firstPlayer) {
    currentPlayer = firstPlayer;
    startScreen.style.display = 'none';
    boardElement.style.display = 'grid';
    createBoard();
    detectColorSchemeChange();
    startColorUpdateInterval();

    if (currentPlayer === 'C') {
        setTimeout(computerMove, 500);
    }
}

// 이벤트 리스너
restartButton.addEventListener('click', restartGame);
computerFirstButton.addEventListener('click', () => startGame('C'));
meFirstButton.addEventListener('click', () => startGame('P'));

// 초기 설정
createBoard();
boardElement.style.display = 'none';
startScreen.style.display = 'flex';
    </script>
</body>
</html>




<div style="height:54px" aria-hidden="true" class="wp-block-spacer"></div>



<p>Our first project is Gomoku.</p>



<p>Just complete 5 stones first, regardless of horizontal, vertical, or diagonal.</p>
]]></content:encoded>
					
					<wfw:commentRss>https://offline.local/gomoku/feed/</wfw:commentRss>
			<slash:comments>0</slash:comments>
		
		
			</item>
	</channel>
</rss>
